import json
import fire
import tensorflow as tf
from tensorflow.keras import layers
from hypergol import DatasetFactory
from hypergol import TensorflowModelManager
from data_models.sentence import Sentence
from data_models.model_output import ModelOutput

from hypergol import DatasetFactory
from hypergol import RepoData
from hypergol import TensorflowModelManager
from models.{{ modelName.asSnake }}_data_processor import {{ modelName }}DataProcessor
from models.{{ modelName.asSnake }} import {{ modelName }}
{%- for name in blockDependencies %}
from models.{{ name.asSnake }} import {{ name }}
{%- endfor %}
from data_models.{{ inputClass.asSnake }} import {{ inputClass }}
from data_models.{{ outputClass.asSnake }} import {{ outputClass }}


LOCATION = '.'
PROJECT = 'example_project'
BRANCH = 'example_branch'


def train_{{ modelName.asSnake }}(force=False):
    repo = Repo(path='.')
    if repo.is_dirty():
        if force:
            print('Warning! Current git repo is dirty, this will result in incorrect commit hash in datasets')
        else:
            raise ValueError("Current git repo is dirty, please commit your work befour you run the pipeline")

    commit = repo.commit()
    repoData = RepoData(
        branchName=repo.active_branch.name,
        commitHash=commit.hexsha,
        commitMessage=commit.message,
        comitterName=commit.committer.name,
        comitterEmail=commit.committer.email
    )

    dsf = DatasetFactory(
        location=LOCATION,
        project=PROJECT,
        branch=BRANCH,
        chunkCount=16,
        repoData=repoData
    )

    batchProcessor = {{ modelName }}DataProcessor(
        inputDataset=datasetFactory.get(dataType={{ inputClass }}, name='inputs'),
        inputBatchSize=16,
        outputDataset=datasetFactory.get(dataType={{ outputClass }}, name='outputs'),
        exampleArgument=''
    )
    {{ modelName.asVariable }} = {{ modelName }}(
        {%- for name in blockDependencies %}
            {{ name.asVariable }} = {{ name }}(
                blockArgument1='',
                blockArgument2='',
            )
        {%- endfor %}
    )
    modelManager = TensorflowModelManager(
        model={{ modelName.asVariable }},
        optimizer=tf.keras.optimizers.Adam(lr=1),
        batchProcessor=batchProcessor,
        location=LOCATION,
        project=PROJECT,
        branch=BRANCH,
        name='{{ modelName }}',
        restoreWeightsPath=None
    )
    modelManager.run(
        stepCount=100,
        evaluationSteps=list(range(0, 100, 10)),
        tracingSteps=list(range(0, 100, 5))
    )


if __name__ == '__main__':
    tf.get_logger().setLevel('ERROR')
    fire.Fire(train_{{ modelName.asSnake }})
